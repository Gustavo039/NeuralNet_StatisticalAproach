[
  {
    "objectID": "GD.html",
    "href": "GD.html",
    "title": "1  Regressão Linear e Gradiente Descendente",
    "section": "",
    "text": "2 Regressão Linear\nA regressão linear simples é um método estatístico utilizado para modelar a relação entre duas variáveis: uma variável dependente (ou resposta), que desejamos prever, e uma variável independente (ou explicativa), que usamos para fazer essa previsão. O objetivo da regressão linear é encontrar uma função linear que melhor descreva essa relação.\nPor exemplo: podemos utilizar o número de banheiros e quartos de uma casa para predizer seu valor, o número de gols de um atacante utilizando seu histórico dos últimos anos e sua idade ou ainda em um cenário atual, muitas startups que desenvolvem tecnologias de inteligência artificial estão usando regressão linear para prever receitas futuras com base em métricas como usuários ativos, engajamento em plataformas digitais e número de clientes corporativos.\nDentro de uma visão matemática e estatística, um modelo de regressão linear possui uma das estruturas mais simples, dado por:\n\\[Y = \\beta_0 +\\beta_1x_1 + \\epsilon\\]\nonde\nA essência da regressão linear simples está na tentativa de ajustar uma linha reta aos dados que minimiza a diferença entre os valores observados de \\(Y\\) e os valores preditos pela linha, utilizando para isso as variáveis explicativas\nO que torno um modelo em um modelo estatístico são\nO cáculo desses coeficientes possui forma fechada, dada por: \\[(X^TX)^{-1}X^TY\\]\nPela seguinte demonstração\nSeja \\(X\\) a matriz de planejamento. Para um conjunto de dados com \\(p\\) variáveis explicativas e \\(n\\) observações, temos um matriz de planejamento de dimensão \\(n \\ \\times \\ p\\)\nPara se estimar os parametros de uma regressão linear o pensamento mais ismples é: qual o valor dos paramaetros que me retorna o menor erro?\nOu seja, para quais valores dos coeficientes \\(\\beta_0,\\beta_1, ..., \\beta_p\\) temos o menor erro.\nO “menor erro” pode ser estruturada em forma matematica:\n\\[Erro = E_i= Y_i-\\hat Y_i\\] \\[Soma Erro Abs = \\sum E_i^2\\]\nPor sua vez, essa função pode ser chamada de função de custo. Dentro no universo de estatística, aprednizado de máquina e redes neurais diversas função de custos são definidas e utilizadas, satisfzanedo um nicho e onjetivo especifio\nA soma quadratica dos erros é uma das funções mais simples e mais utilizada no contexto de regressão linear\nPara sua minização, temos a seguinte estrutura\nA resposta principal está na formulação em forma fechada da solução, dada por:\n\\[\\beta = (X^TX)^{-1}X^TY\\]\nonde\nA primeira parte da fórmula envolve a inversão da matriz \\((X^TX)\\). Embora a inversão de uma matriz seja possível em teoria, em termos computacionais ela pode ser extremamente custosa. O processo de inversão tem um custo computacional que aumenta exponencialmente com o tamanho da matriz, especialmente à medida que o número de variáveis explicativas (ou colunas de X) aumenta.\nO custo de inverter uma matriz \\(n \\times n\\) é aproximadamente \\(O(N^3)\\) o que significa que, para dados com muitas variáveis, o tempo de execução cresce de maneira cúbica.\nAlém disso, se a matriz \\(X^TX\\) for mal-condicionada (ou seja, quando algumas variáveis são altamente correlacionadas entre si), o processo de inversão pode se tornar instável, resultando em erros numéricos.\nDevido ao elevado custo de calcular diretamente a inversa dE \\(X^TX\\) métodos iterativos, como os baseados em gradiente, são frequentemente preferidos em cenários com grandes conjuntos de dados ou alta dimensionalidade. Esses métodos não exigem a inversão direta da matriz e podem fornecer aproximações suficientemente boas para os coeficientes \\(\\beta\\) com um custo computacional muito menor.\nO gradiente é um conceito central em otimização. Ele representa a direção e a intensidade de variação de uma função com respeito a cada um de seus parâmetros. Em termos mais intuitivos, o gradiente aponta “em que direção” e “o quão rapidamente” o valor da função de custo aumenta ou diminui em relação aos parâmetros.\nPara uma função de custo \\(J(\\theta)\\) onde \\(\\theta\\) representa o vetor de parâmetros, o gradinete de \\(\\nabla J(\\theta)\\) é o vetor de derivadas parciais:\n\\(\\nabla J(\\theta) = (\\frac{\\partial J}{\\partial\\theta_1},\\frac{\\partial J}{\\partial\\theta_2},...,\\frac{\\partial J}{\\partial\\theta_n})\\)\nCada componente desse vetor indica como uma pequena alteração em um parâmetro específico impacta \\(\\theta_i\\) o valor da função de custo. No contexto de minimização, o gradiente fornece a direção em que a função de custo aumenta mais rapidamente. Portanto, para minimizar \\(J(\\theta)\\) ajustamos os parâmetros no sentido oposto ao gradiente — daí o nome “gradiente descendente”.\nDentre o contexto de regressão linear, um conjunto de variáveis pode ser utilizada para predizer o valor de uma outra variável. O processo de escolha de um conjunto de variáveis explicativas que melhor predizem a variável resposta é chamado de modelagem.\nA diferença entre o valor predito e o valor verdadeiro da variável de estudo é chamado de resíduo.\nUma das formas de estimação de um modelo linear é minimizando o o erro total do modelo, ou seja, encontrando o modelo que minimza o valor do resíduo.\nDe maneira detalhada, deseja-se estimar o modelo que minimiza a soma dos resíduos ao quadrado\n\\[SRQ = \\sum^n_{i=0} (y_i - \\hat y_i)^2\\]\nA SRQ pode ser chamada de uma função de custo.\nA minimização entra na área de otimização matematica em otimização.\nExistem diferentes métodos\nO gradiente em relação em relação aos pesos é dado por:\n\\[D_m = \\frac{\\partial(Funcao de Custo)}{\\partial m } = \\frac{\\partial}{\\partial m}(\\frac{1}{n}\\sum^n_{i=0}(y_i - \\hat y)^2)\\]\n\\[D_m = \\frac{2}{n}(\\sum (y_i- \\hat y_i) \\times \\frac{\\partial}{\\partial m}(y_i-\\hat y_i))\\]\n\\[D_m = \\frac{2}{n}(\\sum (y_i- \\hat y_i) \\times \\frac{\\partial}{\\partial m}(y_i - (mx_i + c)))\\]\n\\[D_m = \\frac{2}{n}(\\sum (y_i- \\hat y_i) \\times(-x_i))\\]\n\\[D_m = -\\frac{2}{n}(\\sum x_i(y_i- \\hat y_i))\\]\nAssim os gradientes sáo dados por\n\\[D_M = -\\frac{1}{n}(\\sum x_i (y - \\hat y_i))\\] e\n\\[D_C = -\\frac{1}{n}(\\sum(y_i - \\hat y_i))\\]\n::: {.content-visible when-format=“html”}\nA regressão logística é utilizada quando o desejamos classficar alguma classe. É um método pertencente a classse dos MLGs e possui certes diferenças para a aplaicação do me´todo de Gradiente Descendente\nA regressão logística é dada pela seguinte função\n$$\n$$\nA principal difernça está na definição da função de custo. Enquanto que na regressão linear a principais funções de custo são a soma dos resíduos ao quadrado ou o erro quadratico médio, para o caso logistico utiliza-se o logaritimo da função que representa a regressão logistica, chamada de Binary Cross-Entropy Loss (Log Loss).\nA Binary Cross-Entropy Loss se deriva do custo de erro, dado por:\n\\[\\text{custo}(h_\\theta(x),y)  = \\begin{cases}\n      -\\log(h_{\\theta}(x)) , & \\text{if } y = 1 \\\\\n      -\\log(1 - h_{\\theta}(x)) , & \\text{if } y = 0\n   \\end{cases}\\]\nOu de maneira unificada\n\\[\\text{custo}(h_{\\theta}(x), y) = -y^{(i)} \\times \\log(h_{\\theta}(x^{(i)})) - (1 - y^{(i)}) \\times \\log(h_{\\theta}(x^{(i)}))\\]\nPara \\(m\\) observações, a métrica pode ser simplificada como a média:\n\\[J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m y^{(i)} \\times \\log(h_{\\theta}(x^{(i)})) - (1 - y^{(i)}) \\times \\log(h_{\\theta}(x^{(i)}))\\]\nAssim como no caso da regressão linear, o objetivo é minimizar a função \\(J(\\theta)\\)\nDado um total de \\(n\\) variáveis, assumimos um total de \\(n\\) parâmetros para o vetor \\(\\theta\\). Para minimzar \\(J(\\theta)\\), temos que realizar um Gradiente Descendente em cada parametro de \\(\\theta\\), denominado \\(\\theta_j\\). Onde a cada iteração, a seguinte atualização é realizada\n\\[\\theta_j \\leftarrow \\theta_j - \\alpha \\frac{\\partial}{\\partial \\theta_j} J(\\theta) \\] Na etapa final do algoritmo, precisamos rodar a o gradiente descendente simultaneamente em cada parametro, ou seja, atualizar \\(\\theta_0, \\theta_1, ..., \\theta_n\\) contidos no vetor \\(\\mathbf{\\theta}\\)\nA atualização em \\(\\theta_j\\) é computada a partir de sua derivada\n\\[\\frac{\\partial}{\\partial\\theta_j}J(\\theta) = \\frac{1}{m}\\sum^m_{i=1}(h_\\theta(x^{(i)})-y^{(i)})x^{(i)}_j\\]\nE portanto, substituindo na formula da atualização, temos a seguinte regra:\n\\[\\theta_j \\leftarrow \\theta_j - \\alpha \\frac{1}{m}\\sum^m_{i=1}(h_\\theta(x^{(i)})-y^{(i)})x^{(i)}_j\\]\nAlem das funções de custo ja listadas, outras são definidas para determinados nichos e obejtivos. O seguinte tópico buscou listar as principais."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Redes Neurais Artificiais: um bom lugar para um estatístico se deitar",
    "section": "",
    "text": "Prefácio\nRedes Neurais Artificiais: um bom lugar para um estatístico se deitar\nNos últimos anos, a explosão no volume e na variedade de dados disponíveis tem transformado a forma como enfrentamos desafios analíticos. Este cenário dinâmico tem impulsionado avanços significativos em áreas como a Ciência de Dados, Estatística e Inteligência Artificial, com o desenvolvimento de modelos mais flexíveis e robustos, capazes de lidar com a complexidade crescente dos dados modernos. Modelos que possam lidar com cenários onde o número de variáveis supera o de observações, sem sacrificar a simplicidade e interpretabilidade, tornaram-se cada vez mais essenciais.\nDentro desse contexto, as redes neurais artificiais emergem como uma poderosa metodologia. Apesar de ser um conceito introduzido há décadas no campo da Inteligência Artificial, somente nos últimos anos as redes neurais ganharam uma popularidade generalizada, devido ao seu sucesso em diversas aplicações práticas. Contudo, mesmo com sua ampla aplicabilidade, as redes neurais ainda não são amplamente exploradas em cursos de graduação em Estatística. A terminologia frequentemente associada ao aprendizado de máquinas e a complexidade algorítmica envolvida podem representar barreiras significativas para estatísticos em formação.\nEste livro surge como uma resposta a essa lacuna, oferecendo uma introdução acessível e orientada à modelagem de redes neurais sob uma ótica estatística. Com foco em apresentar os conceitos fundamentais de forma clara e direta, este material busca facilitar o aprendizado para aqueles que já possuem uma base sólida em Estatística, mas que encontram dificuldades ao transitar para áreas como o Aprendizado de Máquinas. Além disso, o livro se complementa com rotinas implementadas em R, permitindo uma aplicação prática e concreta dos modelos discutidos.\nEstudos de simulação também serão explorados para avaliar a performance dos estimadores sob diferentes configurações, tais como funções de ativação, número de camadas ocultas (hidden layers), tamanho da amostra e função de perda — um componente crítico no processo de otimização e estimação via backpropagation. A combinação dessas abordagens permitirá uma compreensão mais profunda e adaptada ao público estatístico, trazendo luz às potencialidades e limitações das redes neurais artificiais em cenários reais."
  },
  {
    "objectID": "GD.html#o-gradiente-descendente-como-alternativa-à-ols",
    "href": "GD.html#o-gradiente-descendente-como-alternativa-à-ols",
    "title": "1  Regressão Linear e Gradiente Descendente",
    "section": "4.1 O Gradiente Descendente como Alternativa à OLS",
    "text": "4.1 O Gradiente Descendente como Alternativa à OLS\nO gradiente descendente é uma técnica iterativa de otimização que ajusta os parâmetros na direção oposta ao gradiente, com o objetivo de encontrar o ponto de mínimo da função de custo. A atualização dos parâmetros em cada iteração é feita com a seguinte fórmula:\n\\[\\theta^{(t+1)} = \\theta(t) -\\eta\\nabla J(\\theta^{(t)}) \\] Onde:\n\n\\(\\theta^{(t+1)}\\) é o vetor de parâmetros atualizado.\n\\(\\theta^{(t)}\\) é o vetor de parâmetros na iteração atual.\n\\(\\nabla\\) é a taxa de aprendizado (learning rate), um hiperparâmetro que controla o tamanho dos passos de atualização.\n\\(\\nabla J(\\theta(t))\\) é o gradiente da função de custo calculado com base nos parâmetros da iteração atual."
  },
  {
    "objectID": "neuron.html",
    "href": "neuron.html",
    "title": "2  Neuronios e Camadas",
    "section": "",
    "text": "3 Estrutura Básica\nUm neurónio é a estrura mais básica de uma rede neural. Ele recebe um valor, processa ele, e retorna outro valor que é passado para o neuronio seguinte.\nEm uma linguagem matemática, seja um neurônio \\(K\\) \\(x_1,x_2, ....,x_m\\) variáveis, \\(m+1\\) entradas (inputs) e um vetor de pesos \\(w_1,w_2, ..., w_m\\).\n\\[z_k = \\phi(\\sum^m_{j=0}w_{kj}x_j)\\]\nEm rede neural, o fluxo dos dados percorre os neuronios atraves de determinados caminhos, chamados de Camadas.\nUma camada (layer) pode ser caracterizada como um conjunto de neuronios, onde neuronios de diferentes camadas possuem comunicação, porem neuronios de uma mesma camadas não possuem nenhuma ligação\n-> Adicionar imagem de uma rede com camadas, mas sem definir os tipos de camadas\nUma rede possui 3 camadas distintas: Entrada (Input), Oculta (Hidden) e Saida (Output)\nO objetivo do Backpropagation é calcular as derivadas parciais \\(\\frac{\\partial C}{\\partial w}\\) e \\(\\frac{\\partial C}{\\partial b}\\), onde \\(C\\) é função de custo, \\(w\\) é o peso (weight) e \\(b\\) é o viés (bias). Para o método funcionar, precisamos definir duas suposições"
  },
  {
    "objectID": "GD.html#função-de-custo-exponencial",
    "href": "GD.html#função-de-custo-exponencial",
    "title": "1  Regressão Linear e Gradiente Descendente",
    "section": "10.1 Função de Custo Exponencial",
    "text": "10.1 Função de Custo Exponencial\nUtilizada para o algoritmo AdaBoost de classsificação, onde sua forma de convexidade e crescimento exponencial para valroes negativos a torna sensivel para valores outliers. Dada por\n\\[f(x) = \\frac{1}{2}log(\\frac{p(1|x)}{1-p(1|x)})\\]"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "neuron.html#equações",
    "href": "neuron.html#equações",
    "title": "2  Neuronios e Camadas",
    "section": "5.2 Equações",
    "text": "5.2 Equações\nO método se baseia em 4 equações fundamentais\n\n5.2.1 Equação para o erro na camada de saída\n\\[\\delta^L_j = \\frac{\\partial C}{\\partial a^L_j}\\sigma´(z^L_j)\\]\nO primeiro termo a direta, \\(\\frac{\\partial C}{\\partial a^L_j}\\) mensura o quão rápido a função de custo está se adaptando em relação ao j-ésimo neurônio de saída. Por exemplo, se a função custo não depender muito de um neuronio j em particular, portanto \\(\\delta^L_j\\) será um valor pequeno\nJá o segundo termo a direita, \\(\\sigma´(z^L_j)\\), mensura o quão rápido a função de ativação \\(\\sigma\\) esta mudando em relação a \\(z^L_j\\)\nNa forma matricial a BP1 possui a seguinte forma\n\\[\\sigma^L = \\Delta_aC \\odot \\sigma´ (z^L)\\] Onde, \\(\\Delta_aC\\) é definido como o vetor que sias componentes são as derivadas parciais \\(\\frac{\\partial C}{\\partial a^L_j}\\), para facilitar o entedimento, podemos expressar \\(\\Delta_aC\\) como a taxa de variação de \\(C\\) em relação ao ativações de saída\n\n\n5.2.2 Equação para o erro\nA equação para o erro \\(\\delta^l\\) em relação ao erro uam camada a frente, \\(\\delta^{l+1}\\) é dado por\n\\[\\delta^l = ((w^{l+1})^T\\delta^{l+1})\\odot\\sigma´(z^l)\\]\nOnde \\((w^{l+1})^T\\) é a matriz transposta da matriz de pesos \\(w^{l+1}\\) para a \\(l+1\\)-ésima camada\n\n\n5.2.3 Equação para a taxa de variação do custo em relação aos vieses\n\\[\n\\frac{\\partial C}{\\partial b^l_j} = \\delta^l_j\n\\tag{5.1}\\]\nTemos que o erro \\(\\delta^l_j\\) é exatamente igual a taxa de variação \\(\\frac{\\partial C}{\\partial b^l_j}\\). Isso se mostra como um ponto positivo, dado que já sabemos como calcular \\(\\delta^l_j\\) como visto nas equações BP1 e BP2. Assim podemos escrever a BP3 como\n\\[\\frac{\\partial C}{\\partial b} = \\delta\\]\nOnde \\(\\delta\\) está sendo calculado no mesmo neuronio do viés \\(b\\)\n\n\n5.2.4 Equação para a taxa de variação do custo em relação aos pesos\n\\[\\frac{\\partial C}{\\partial w^l_{jk}} = a^{l-1}_k\\delta^l_j\\]"
  },
  {
    "objectID": "neuron.html#algoritmo",
    "href": "neuron.html#algoritmo",
    "title": "2  Neuronios e Camadas",
    "section": "5.3 Algoritmo",
    "text": "5.3 Algoritmo\nAs funções definidas na seção passada provem uma forma de se calcular o gradiente da função de custo. Essas funções são utilizadas no algortimo do método que possui 5 passos fundamentais\n\nInput x\n\n\nO conjunto dados é introduzido a rede. No pensamento algebrico, o vetor \\(X\\) é introduzido a rede e atribuido como a ativação da camada de entrada\n\n\nFeedforward\n\n\nPara cada camada \\(l = 2,3, ..., L\\) calcula-se os valores retornado pelos neurônios \\(z^l = w^la^{l-1}+b^l\\), onde \\(w^l\\) é a matriz de peso para a camada \\(l\\), \\(a^{l-1}\\) é o valor de ativação da camada anterior, \\(b^l\\) é o vetor de vieses para a camada \\(l\\)\nAlém disso, devemos reforçar que \\(a^l = \\sigma(z^l)\\), onde \\(\\sigma\\) é uma função de ativação\n\n\nErro de Saída\n\n\nO erro na camada de saída é calculado, dado por \\[\\delta^L=\\Delta_aC\\odot\\sigma´(z^L)\\]\n\\(\\Delta_aC\\) é o gradiente da função de custo C em relação ao valor de ativação \\(a^L\\)\n\\(\\sigma´(z^L)\\) é a derivada da função de ligação no valor de ativação \\(z^l\\)\nIsso quantifica o quanto a saída da rede (ativações) se desvia da saída desejada.\n\n\nPropagação do Erro\n\n\nPara cada camada \\(l = L-1,L-2, ...,2\\), o erro para a camada é calculado, dado por \\[\\delta^l = ((w^{l+1})^T\\delta^{l+1})\\odot\\sigma´(z^l)\\]\n\\((w^{l+1})^T\\delta^{l+1}\\) propaga o erro para trás na rede\n\\(\\sigma´(z^l)\\) ajusta o erro baseado na função de ativação\nNessa etapa o erro é propagado para trás, dando origem ao nome do método Backpropagation\n\n\nCalculo dos Gradientes\n\n\nNo último passo do algoritmo, os gradientes em relação aos pesos e vieses são calculados\nPara o peso (weight) temos \\[\\frac{\\partial C}{\\partial w^l_{jk}} = a^{l-1}_k\\delta^l_j\\]\nJá para os vieses (bias) \\[\\frac{\\partial C}{\\partial b^l_{j}} = \\delta^l_j\\]\nOs valores calculados para cada gradiente são utilizados no momento da otimização via gradiente descendente, minimizando a função de custo"
  },
  {
    "objectID": "neuron.html#pesos-e-vieses",
    "href": "neuron.html#pesos-e-vieses",
    "title": "2  Neuronios e Camadas",
    "section": "5.1 Pesos e Vieses",
    "text": "5.1 Pesos e Vieses\nAntes de entrar de fato nas equações e formas do método, devemos fazer definições importantes sobre a nomenclatura de certos parâmetros e suas caracteristicas\nQuando falamos de pesos e vieses, há muita confusão sobre a função e aplicação de cada um, onde muitas pessoas utilizam esses termos como sinônimos, o que fortemente não é verdade.\nA confusão entre pesos e vieses surge frequentemente porque ambos são parâmetros de uma rede neural que são ajustados durante o treinamento e determinam coletivamente o comportamento do modelo. No entanto, eles servem a propósitos e funções distintas.\nOs pesos (weights) são fatores de multiplicação aplicados aos valores em cada neuronio e determinam a força e direção da relação entre os valores de entrada e de saída de um neurônio.\nJá os vieses (bias) são fatores de soma e permitem o deslocamento da função de ativação, auxiliando que o modelo se ajuste melhor aos dados\nDado uma rede com uma função de ativação \\(At\\), temos o seguinte valor de saida de um determinado neurônio\n\\[z = At(w_i* x_i) + b\\] Vemos que o peso \\(w_i\\) multiplica o valor de entrada \\(x_i\\), controlando a influência de \\(x_i\\) no neuronio atual. Já o vies \\(b\\) é somado ao valor retornado pela função de ativação, auxiliando o neuronio a melhor se ajustar aos dados\nAs principais diferenças podem resumidas em uma tabela"
  }
]